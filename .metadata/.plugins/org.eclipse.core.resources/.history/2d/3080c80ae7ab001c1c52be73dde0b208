package com.revature.project.pctc.handlers;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import com.revature.project.pctc.structures.*;
import com.revature.project.pctc.utilities.ConnUtil;
import io.javalin.http.Handler;

public class AccountController {
	//Gets all accounts.
	public static Handler getAccounts = ctx -> {
		int p = Integer.parseInt(ctx.pathParam("id"));
		Connection conn = ConnUtil.createConnection();
		String selectAccounts = "select * from account where client_id=?";
		PreparedStatement ptsmt = conn.prepareStatement(selectAccounts);
		ptsmt.setInt(1, p);
		ResultSet rs = ptsmt.executeQuery();
		ArrayList<Account> aList = new ArrayList<Account>();
		Account a;
		while (rs.next()) {
			int id = rs.getInt("id");
			String accNum = rs.getString("account_number");
			int bal = rs.getInt("account_balance");
			int cId = rs.getInt("client_id");
			a = new Account(id, accNum, bal, cId);
			aList.add(a);
		}
		
		if(aList.size() == 0) {
			ctx.status(404);
		}
		
		ctx.json(aList);
		rs.close();
		ptsmt.close();
	};

	//Adds an account.
	public static Handler addAccount = ctx -> {
		int cId = Integer.parseInt(ctx.pathParam("id"));
		Account a = ctx.bodyAsClass(Account.class);
		Connection conn = ConnUtil.createConnection();
		PreparedStatement ptsmt = conn.prepareStatement("INSERT into account values(?,?,?,?)");
		ptsmt.setInt(1, a.getId());
		ptsmt.setString(2, a.getAccNum());
		ptsmt.setInt(3, a.getBal());
		ptsmt.setInt(4, cId);
		ptsmt.execute();
		ctx.status(201);
		ptsmt.close();
	};
	 
	//get account by ID
	public static Handler getAccountById = ctx -> {
		int p = Integer.parseInt(ctx.pathParam("id"));
		Connection conn = ConnUtil.createConnection();
		String selectAccounts = "select * from account where id=?";
		PreparedStatement ptsmt = conn.prepareStatement(selectAccounts);
		ptsmt.setInt(1, p);
		ResultSet rs = ptsmt.executeQuery();
		ArrayList<Account> aList = new ArrayList<Account>();
		Account a;
		while (rs.next()) {
			int id = rs.getInt("id");
			String accNum = rs.getString("account_number");
			int bal = rs.getInt("account_balance");
			int cId = rs.getInt("client_id");
			a = new Account(id, accNum, bal, cId);
			aList.add(a);
		}
		
		if(aList.size() == 0) {
			ctx.status(404);
			
		}

		ctx.json(aList);
		rs.close();
		ptsmt.close();
	};
	
	//This updates the acc number of a bank account with a specific ID in my database.
	public static Handler updateAccount = ctx -> {
		int p = Integer.parseInt(ctx.pathParam("id"));
		Account a = ctx.bodyAsClass(Account.class);
		Connection conn = ConnUtil.createConnection();
		PreparedStatement ptsmt = conn.prepareStatement("update account set account_number = ? where id = ?");
		ptsmt.setString(1, a.getAccNum());
		ptsmt.setInt(2, p);
		ptsmt.execute();
		ctx.status(200);
		ptsmt.close();
	};
	 
	//This deletes an account in my database.
	public static Handler deleteAccount = ctx ->{
		int p = Integer.parseInt(ctx.pathParam("id"));
		Connection conn = ConnUtil.createConnection();
		PreparedStatement ptsmt = conn.prepareStatement("delete from account where id = ?");
		ptsmt.setInt(1, p);
		ptsmt.execute();
		ctx.status(205);
		ptsmt.close();	
	};
	
	public static Handler depositIntoAccount = ctx ->{
		String getBalance = "select account_balance from account where id = ?";
		String updateBalance = "update account set account_balance= ? where id = ?";
		int p = Integer.parseInt(ctx.pathParam("id"));
		Account deposit = ctx.bodyAsClass(Account.class);
		Connection conn = ConnUtil.createConnection();
		PreparedStatement ptsmt = conn.prepareStatement(getBalance);
		ptsmt.setInt(1, p);
		ResultSet rs = ptsmt.executeQuery();
		int newBal;
		while (rs.next()) {
			int currentBal = rs.getInt("account_balance");
			newBal = currentBal + deposit.getBal();
			ptsmt = conn.prepareStatement(updateBalance);
			ptsmt.setInt(1, newBal);
			ptsmt.setInt(2, p);
			ptsmt.execute();
			ctx.status(200);
		}
		rs.close();
		ptsmt.close();
	};
	
	public static Handler withdrawFromAccount = ctx ->{
		String getBalance = "select account_balance from account where id = ?";
		String updateBalance = "update account set account_balance= ? where id = ?";
		int p = Integer.parseInt(ctx.pathParam("id"));
		Account withdraw = ctx.bodyAsClass(Account.class);
		Connection conn = ConnUtil.createConnection();
		PreparedStatement ptsmt = conn.prepareStatement(getBalance);
		ptsmt.setInt(1, p);
		ResultSet rs = ptsmt.executeQuery();
		int newBal;
		while (rs.next()) {
			int currentBal = rs.getInt("account_balance");
			newBal = currentBal - withdraw.getBal();
			if (newBal <= 0) {
				ctx.status(404);
			} else {
			ptsmt = conn.prepareStatement(updateBalance);
			ptsmt.setInt(1, newBal);
			ptsmt.setInt(2, p);
			ptsmt.execute();
			ctx.status(200);
			}
		}
		rs.close();
		ptsmt.close();
	};

}